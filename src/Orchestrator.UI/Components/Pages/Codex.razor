@page "/codex"
@rendermode InteractiveServer
@inject HttpClient Http
@implements IDisposable

<PageTitle>Codex</PageTitle>

<h1>Codex</h1>

<div class="mb-3">
    <input class="form-control" placeholder="codex command" @bind="command" />
</div>
<button class="btn btn-primary me-2" @onclick="Run">Run</button>
<button class="btn btn-secondary" @onclick="Clear">Clear Logs</button>

@if (!string.IsNullOrEmpty(result))
{
    <pre class="mt-3">@result</pre>
}

<p class="mt-3"><strong>Status:</strong> @status</p>
<pre class="border p-2" style="height:200px; overflow-y:auto">@string.Join("\n", logs)</pre>

@code {
    private string command = string.Empty;
    private string result = string.Empty;
    private string status = string.Empty;
    private List<string> logs = new();
    private CancellationTokenSource? _cts;

    private async Task Run()
    {
        var resp = await Http.PostAsJsonAsync("api/codex/run", new { command });
        result = await resp.Content.ReadAsStringAsync();
    }

    private async Task Clear()
    {
        await Http.DeleteAsync("api/codex/logs");
        logs.Clear();
    }

    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
        _ = PollAsync(_cts.Token);
    }

    private async Task PollAsync(CancellationToken token)
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(2));
        try
        {
            while (await timer.WaitForNextTickAsync(token))
            {
                status = await Http.GetStringAsync("api/codex/status");
                var l = await Http.GetFromJsonAsync<List<string>>("api/codex/logs");
                logs = l ?? new();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (OperationCanceledException) { }
    }

    public void Dispose()
    {
        _cts?.Cancel();
    }
}
